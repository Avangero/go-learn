---
description: 
globs: 
alwaysApply: true
---
## Новый Проект: Портал Обучения для Сотрудников

Отлично, что мы переходим к реальному проекту! Твой новый проект — **Портал Обучения для Сотрудников**. Это будет внутренний веб-портал, который позволит сотрудникам развивать свои навыки, проходя курсы, а руководителям — управлять этим процессом.

### **Основная Идея и Цель**

Цель этого портала — создать централизованную платформу для непрерывного обучения и развития сотрудников внутри компании. Он должен быть интуитивно понятным для пользователей и предоставлять эффективные инструменты для администраторов.

### **Ключевые Функциональные Возможности**

1.  **Личный Кабинет Сотрудника:**
    * **Просмотр Доступных Курсов:** Сотрудники смогут видеть каталог всех доступных курсов.
    * **Запись на Курсы:** Возможность записываться на интересующие курсы.
    * **Отслеживание Прогресса:** Отображение текущего прогресса по каждому курсу (например, "пройдено X из Y уроков").
    * **Просмотр Пройденных Курсов и Навыков (Skills):** Отображение списка завершенных курсов и навыков, которые они приобрели.
    * **Roadmap Курса:** Детальный план курса, показывающий его структуру и этапы.
    * **Профиль Пользователя:** Базовая информация о сотруднике.

2.  **Личный Кабинет Руководителя (Администратора):**
    * **Управление Курсами:** Создание, редактирование, удаление курсов, включая их содержание и навыки, которые они дают.
    * **Назначение Курсов:** Возможность назначать определенные курсы сотрудникам или группам.
    * **Валидация Прогресса/Навыков:** Просмотр прогресса сотрудников по курсам, возможность подтверждать завершение курса или валидировать полученные навыки.
    * **Управление Пользователями:** Возможность просматривать список сотрудников, их роли и базовую информацию.

### **Архитектура (Микросервисы)**

Проект будет построен на **микросервисной архитектуре** с использованием Go. Это позволит нам разрабатывать и развертывать компоненты независимо, обеспечивая масштабируемость и гибкость.

Начнем с трех ключевых сервисов:

1.  **`Auth Service` (Сервис Аутентификации и Авторизации):**
    * **Отвечает за:** Регистрацию новых пользователей, вход в систему (логин), выдачу и валидацию **JWT-токенов**, управление ролями пользователей (`employee`, `manager`).
    * **Технологии:** Fiber, PostgreSQL (для хранения пользователей), `bcrypt` для хеширования паролей, JWT для токенов.

2.  **`User Service` (Сервис Пользователей):**
    * **Отвечает за:** Хранение и управление детальной информацией о пользователях (имя, фамилия, должность, отдел), которая не относится напрямую к аутентификации.
    * **Взаимодействие:** Будет получать информацию о пользователях через `Auth Service` (через JWT) и может обмениваться данными с другими сервисами.

3.  **`Course Service` (Сервис Курсов):**
    * **Отвечает за:** Создание, чтение, обновление и удаление курсов, их структуры (модули, уроки), а также за управление навыками, которые дают курсы.
    * **Взаимодействие:** Будет зависеть от `Auth Service` для проверки прав доступа (кто может создавать/редактировать курсы, а кто только просматривать).

### **Основные Технологии**

* **Язык:** Go
* **Веб-фреймворк:** **Fiber** (быстрый, минималистичный, удобный для API)
* **База данных:** **PostgreSQL** (надежная и широко используемая)
* **Управление БД:** **`sqlx`** (удобная обертка над стандартным `database/sql`)
* **Аутентификация/Авторизация:** **JWT (JSON Web Tokens)**
* **Хеширование паролей:** `bcrypt`
* **Валидация данных:** `go-playground/validator`
* **Контейнеризация:** **Docker**
* **Оркестрация контейнеров:** **Docker Compose**
* **Логгирование:** `Zap` или `Zerolog` (будем использовать позже)
* **Межсервисное взаимодействие:** REST API (в начале), возможно RabbitMQ для асинхронных событий (на более поздних этапах).